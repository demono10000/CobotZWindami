// MQTT
var BROKER_INFO = {
     NAME : 'broker',
     IP: '192.168.1.152',
     PORT: 1883
};
// USB RS485
var SERIAL_INFO = {
    NAME : 'serial',
    PORT: 'COM4',
};
var SERIAL_OPTS = {
   baudRate: 115200,
   autoOpen: true,
   stopBits: 1,
   dataBits: 8,
   parity: 'none'
};
// GPIO
setGeneralDigitalOutput(0, 1);
setGeneralDigitalOutput(1, 0);
setGeneralDigitalOutput(2, 0);
// MQTT + RS485
function BeforeStart() {
	mqttInitialize(BROKER_INFO.NAME, BROKER_INFO.IP, BROKER_INFO.PORT);
	mqttConnect(BROKER_INFO.NAME);
	mqttSubscribe(BROKER_INFO.NAME, 'cobot/polecenia', 1);

    serialInit(SERIAL_INFO.NAME, SERIAL_INFO.PORT, SERIAL_OPTS);
    serialAddListener(SERIAL_INFO.NAME, "connection", function () {
        message(">>>> on serial connection");
    });
    serialAddListener(SERIAL_INFO.NAME, "close", function () {
        message(">>>> on serial close");
    });
}
BeforeStart();
// zmienne globalne
var wagaTacki = 0.955;
var wagaChwytak = 1.0;
var msg = '';
var stolReverse = {x: -stol.x, y: -stol.y, z: -stol.z, rx: -stol.rx, ry: -stol.ry, rz: -stol.rz}
var tackiDoZabraniaConst = {x: -959.16, y: 284.09, z: -30, rx: 180, ry: 0, rz: -90}
var predkoscDomyslna = 100;
var przyspieszenieDomyslne = 100;
var poczatkowa = [0, -90, -90, -90, 90, 180];
// wątek komunikacji z MQTT
var watek1 = Thread(function(){
	while(true){
		msg = mqttGetMessage(BROKER_INFO.NAME, 'cobot/polecenia');
	}
});
// wątek resetu maszyny
var watek2 = Thread(function(){
	while(true){
		wait(getGeneralDigitalInput(1) === 1);
        setGeneralDigitalOutput(0, 1);
        wait(getGeneralDigitalInput(1) === 0);
        setGeneralDigitalOutput(0, 0);
	}
});
// generator crc do modbusa
function crc16(buffer) {
   var crc = 0xFFFF;
   var odd;
   for (var i = 0; i < buffer.length; i++) {
       crc = crc ^ buffer[i];
       for (var j = 0; j < 8; j++) {
           odd = crc & 0x0001;
           crc = crc >> 1;
           if (odd) {
               crc = crc ^ 0xA001;
           }
       }
   }
   return crc;
};
// wysyłanie danych do modbusa
function WyslijSerial(one, two){
   var crc = crc16([0x01,0x03,one, two, 0x00, 0x01]).toString(16);
   serialSend(SERIAL_INFO.NAME, [0x01, 0x03, one, two,0x00, 0x01, parseInt(crc.substring(2,4),16), parseInt(crc.substring(0,2),16)]);
}
// odczyt danych z modbusa
function OdczytajSerial(){
   var arr = serialReadByte(SERIAL_INFO.NAME, 7, 2000);
   return parseInt(arr[3].toString(16) + arr[4].toString(16), 16);
}
// zapytanie do modbusa
function ZapytajSerial(one, two){
   serialFlush(SERIAL_INFO.NAME);
   WyslijSerial(one, two);
   return OdczytajSerial();
}
// czy chwytak jest zinicjalizowany
function CzyZinicjalizowany(){
   return ZapytajSerial(0x02, 0x00);
}
// inicjalizacja chwytaka
function Inicjalizacja(){
   serialSend(SERIAL_INFO.NAME, [0x01,0x06,0x01, 0x00, 0x00, 0xa5 ,0x48,0x4d]);
   do{
       sleep(100);
   }while(GripperState()==0);
}
// odczytanie pozycji chwytaka
function Odczytajpozycje(){
   return ZapytajSerial(0x02, 0x02);
}
// odczytanie stanu chwytaka
function GripperState(){
   return ZapytajSerial(0x02, 0x01);
}
// czy chwytak trzyma obiekt
function CzyTrzymaObiekt(){
   return GripperState()==2;
}
// presuń chwytak do pozycji
function UstawPozycje(pozycja){
   var wartosc = pozycja.toString(16);
   while(wartosc.length<4){
       wartosc = "0"+wartosc;
   }
   var crc = crc16([0x01, 0x06, 0x01, 0x03, parseInt(wartosc.substring(0,2),16), parseInt(wartosc.substring(2,4),16)]).toString(16);
   serialSend(SERIAL_INFO.NAME, [0x01,0x06,0x01, 0x03, parseInt(wartosc.substring(0,2),16), parseInt(wartosc.substring(2,4),16), parseInt(crc.substring(2,4),16), parseInt(crc.substring(0,2),16)]);
   do{
       sleep(100);
   }while(GripperState()==0);
}
// ustaw moc chwytaka
function UstawMoc(moc){
   var wartosc = moc.toString(16);
   while(wartosc.length<4){
       wartosc = "0"+wartosc;
   }
   var crc = crc16([0x01, 0x06, 0x01, 0x01, parseInt(wartosc.substring(0,2),16), parseInt(wartosc.substring(2,4),16)]).toString(16);
   serialSend(SERIAL_INFO.NAME, [0x01,0x06,0x01, 0x01, parseInt(wartosc.substring(0,2),16), parseInt(wartosc.substring(2,4),16), parseInt(crc.substring(2,4),16), parseInt(crc.substring(0,2),16)]);
}
// przelicz współrzędne stołu do tcp
function pozycjaStoluDoTcp(pozycja){
    return poseTrans(stol, pozycja);
}
// przelicz współrzędne tcp do stołu
function pozycjaTcpDoStolu(pozycja){
    return poseTrans(stolReverse, pozycja);
}
// jedź liniowo do pozycji
function jedzLiniowoDo(pozycja, predkosc, przyspieszenie){
   moveLinear('tcp', pozycjaStoluDoTcp(pozycja), predkosc, przyspieszenie);
}
// zabierz nowa tacke
function wezNowaTacke(){
	var tackiDoZabrania = Util.deepCopy(tackiDoZabraniaConst);
	setPayload(wagaChwytak);
    UstawMoc(100);
	UstawPozycje(1000);
    tackiDoZabrania.z += 30;
	jedzLiniowoDo(tackiDoZabrania, 200, 100);
	tackiDoZabrania.z -= 55;
	jedzLiniowoDo(tackiDoZabrania, predkoscDomyslna, przyspieszenieDomyslne);
	UstawPozycje(0);
	setPayload(wagaChwytak+wagaTacki);
	tackiDoZabrania.z = 20;
	jedzLiniowoDo(tackiDoZabrania, predkoscDomyslna, przyspieszenieDomyslne);
	tackiDoZabrania.y+= 472;
	jedzLiniowoDo(tackiDoZabrania, predkoscDomyslna, przyspieszenieDomyslne);
	tackiDoZabrania.z = -50;
	jedzLiniowoDo(tackiDoZabrania, predkoscDomyslna, przyspieszenieDomyslne);
    UstawPozycje(1000);
	tackiDoZabrania.z = 50;
	setPayload(wagaChwytak);
	jedzLiniowoDo(tackiDoZabrania, predkoscDomyslna, przyspieszenieDomyslne);
	mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'tacka oddana', 1);
}
// zabierz soczewkę o numerze
function wezSoczewkeZTacki(numer){
	if(numer>87 || numer<0){
		return false;
	}
	moveJoint(poczatkowa, 100, 50);
	var pozycjaSoczewki = Util.deepCopy(tackiDoZabraniaConst);
	UstawPozycje(1000);
	pozycjaSoczewki.z = 30;
	pozycjaSoczewki.y += 472;
	pozycjaSoczewki.y += 35*5;
	pozycjaSoczewki.x += 50*3.5;
	var yRzad = Math.floor(numer/11);
	var xRzad = numer%11;
	pozycjaSoczewki.y -= 35*xRzad;
	pozycjaSoczewki.x -= 50*yRzad;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
	sleep(100);
	pozycjaSoczewki.z = -20;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
	UstawMoc(20);
    UstawPozycje(0);
	var szerokosc = Odczytajpozycje()/20;
    message(szerokosc);
	if(szerokosc<23){
		UstawPozycje(1000);
		pozycjaSoczewki.z = 30;
		jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
		mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'nie wykryto soczewki', 1);
		return false;
	}
	pozycjaSoczewki.z = 50;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
    mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'soczewka zabrana', 1);
	return true;
}
// włóż soczewkę do maszyny
function wlozDoMaszynyIWyjmij(numer){
    message('czekam na sygnal wysoki');
    message(getGeneralDigitalInput(0));
    wait(getGeneralDigitalInput(0) == 1);
    message("czekam na sygnal niski");
    wait(getGeneralDigitalInput(0) == 0);
	var pozycja = Util.deepCopy(centrowkaDaj);
	pozycja.z += 40;
    moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
    pozycja.z -= 40;
    moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
    UstawPozycje(1000)
	pozycja.z += 40;
	moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
	mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'czas start', 1);
    wyjmijZMaszyny(numer);
}
// odłóż soczewkę na tackę
function odlozNaTacke(numer){
	moveJoint(poczatkowa, 50, 25);
	if(numer>87 || numer<0){
		return;
	}
	var pozycjaSoczewki = Util.deepCopy(tackiDoZabraniaConst);
	pozycjaSoczewki.z = 30;
	pozycjaSoczewki.y += 472;
	pozycjaSoczewki.y += 35*5;
	pozycjaSoczewki.x += 50*3.5;
	var yRzad = Math.floor(numer/11);
	var xRzad = numer%11;
	pozycjaSoczewki.y -= 35*xRzad;
	pozycjaSoczewki.x -= 50*yRzad;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
	pozycjaSoczewki.z = -10;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
	UstawPozycje(1000);
	pozycjaSoczewki.z = 100;
	jedzLiniowoDo(pozycjaSoczewki, predkoscDomyslna, przyspieszenieDomyslne);
	mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'soczewka wyjeta', 1);
	return true;
}
// wyjeij soczewkę z maszyny
function wyjmijZMaszyny(numer){
	var pozycja = Util.deepCopy(centrowkaWez);
	pozycja.z += 40;
	moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
    var licznik = 0;
    do{
        UstawPozycje(0)
        UstawMoc(20);
        pozycja.z -= 40;
        moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
        UstawPozycje(1000)
        pozycja.z -= 3;
        moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
        UstawPozycje(0);
        pozycja.z += 42;
        moveLinear('tcp', pozycja, predkoscDomyslna, przyspieszenieDomyslne);
        // sleep(100);
    }while(!(CzyTrzymaObiekt() && Odczytajpozycje()/20>15) && ++licznik<3);
    if(licznik>=3){
        popup("Nie zabrano soczewki", 1);
    }
	
	var szerokosc = Odczytajpozycje()/20;
	mqttPublish(BROKER_INFO.NAME, 'cobot/wiadomosc', 'szerokosc po:'+szerokosc, 1);
	odlozNaTacke(numer);
}
// zainicjalizuj chwytak
if(CzyZinicjalizowany() == 0) Inicjalizacja();
// pętla główna
while(true){
    if(msg=='tacka podana'){
		message(msg);
        wezNowaTacke();
        msg = '';
	}else if(msg.includes('wez soczewke')){
		wezSoczewkeZTacki(parseInt(msg.split(':')[1]));
	}else if(msg.includes('wloz do maszyny')){
        wlozDoMaszynyIWyjmij(parseInt(msg.split(':')[1]));
    }
    sleep(1000);
}